<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">


	<cache:annotation-driven
		cache-manager="cacheManager" />


	<!-- 配置数据源 -->
	<bean name="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize"
			value="${druid.dataSource.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive"
			value="${druid.dataSource.maxActive}" />
		<!-- 连接池最大空闲 此属性已被弃用 -->
		<!-- <property name="maxIdle" value="20" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${druid.dataSource.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${druid.dataSource.maxWait}" />

		<property name="validationQuery"
			value="${druid.dataSource.validationQuery}" />
		<property name="testOnBorrow"
			value="${druid.dataSource.testOnBorrow}" />
		<property name="testOnReturn"
			value="${druid.dataSource.testOnReturn}" />
		<property name="testWhileIdle"
			value="${druid.dataSource.testWhileIdle}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${druid.dataSource.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${druid.dataSource.minEvictableIdleTimeMillis}" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned"
			value="${druid.dataSource.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout"
			value="${druid.dataSource.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned"
			value="${druid.dataSource.logAbandoned}" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="${druid.dataSource.filters}" />
	</bean>

	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.ericsson.fms.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.connection.autocommit">true</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- none 不是 auto的值 -->
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
				<prop key="hibernate.jdbc.batch_size">100</prop>
				<prop key="hibernate.order_inserts">true</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.connection.SetBigStringTryClob">true</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.current_session_context_class">
					org.springframework.orm.hibernate5.SpringSessionContext
				</prop>
				<prop key="hibernate.jdbc.time_zone">UTC</prop>
				<prop key="hibernate.default_schema">portal</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" />
	<!-- 配置事务管理器 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- aop 切面注解配置 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="handle*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="count*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="find*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="list*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="release*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="alloc*" propagation="REQUIRED"
				read-only="false" />

			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="txpintcut"
			expression="execution(* com.ericsson.fms.service.core.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txpintcut" />
	</aop:config>

	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- jedis 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- 旧的redis服务器中心 -->
	<!--bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		> <property name="poolConfig" ref="poolConfig" /> <property name="port" value="${redis.port}"
		/> <property name="hostName" value="${redis.host}" /> <property name="password"
		value="${redis.password}" /> <property name="timeout" value="${redis.timeout}"
		></property> <property name="usePool" value="true" /> </bean -->

	<!-- 新的redis链接配置 -->
	<bean id="redisConfiguration"
		class="com.ericsson.fms.core.redis.RedisConfiguration"
		init-method="init">
		<property name="redisUrls" value="${redis.urls}" />
		<property name="redisTimeout" value="${redis.timeout}" />
		<!--<property name="redisPassword" value="${redis.password}" /> -->
		<property name="sentinelMasterName"
			value="${redis.sentinel.masterName}" />
	</bean>

	<bean id="connectionFactory"
		class="com.ericsson.fms.core.redis.JedisConnectionFactory2">
		<constructor-arg name="poolConfiguration"
			ref="poolConfig"></constructor-arg>
		<constructor-arg name="redisConfiguration"
			ref="redisConfiguration"></constructor-arg>
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<bean id="redisService"
		class="com.ericsson.fms.service.core.component.service.RedisService">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<!-- redis cache -->
	<bean id="cacheManager"
		class="org.springframework.data.redis.cache.RedisCacheManager">

		<constructor-arg index="0" ref="redisTemplate" />
		<property name="cacheNames" value="portal:mgmt" />
		<property name="usePrefix" value="true" />
		<property name="transactionAware" value="true" />
		<property name="defaultExpiration" value="1800"></property>
	</bean>

	<!-- file upload -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<!--1024*1024*10=10MB -->
		<property name="maxUploadSize"
			value="${fileupload.maxUploadSize}" />
		<!--resolveLazily属性启用是为了推迟文件解析，以便在upload controller中捕获文件大小异常 -->
		<property name="resolveLazily" value="true" />
		<!-- 配置缓存大小 -->
		<property name="maxInMemorySize"
			value="${fileupload.maxInMemorySize}" />
		<!-- <property name="uploadTempDir" value="${fileupload.path}" /> -->

	</bean>
	<!-- <aop:aspectj-autoproxy /> -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>
