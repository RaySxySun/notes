
==============JDK Built-in Dynamic Proxy==================
OUTPUT:

subject instanceof Proxy:true
subject's class: class com.sun.proxy.$Proxy0
subject has below attributes:m1,m2,m3,m0,
 subject has below functions:equals, toString, hashCode, request, 
 subject's super class is class java.lang.reflect.Proxy
 subject implements the below interfacecom.hsbc.gfix.test.Subject,

results: 
before callingpublic abstract void com.hsbc.gfix.test.Subject.request()
From real subject
after callingpublic abstract void com.hsbc.gfix.test.Subject.request()


----------------------------------------------------------

// target interface
public interface Subject {
	public void request();
}
----------------------------------------------------------
// target: interface implementation. 
public class RealSubject implements Subject{
	@Override
	public void request() {
		System.out.println("From real subject");
	}
}
----------------------------------------------------------
// proxy handler
public class DynamicSubject implements InvocationHandler {
	private Object obj;
	public DynamicSubject(Object obj) {
		super();
		this.obj = obj;
	}

	@Override
	public Object invoke(Object arg0, Method method, Object[] args)
			throws Throwable {
		System.out.println("before calling" + method);	
		method.invoke(obj, args);
		System.out.println("after calling" + method);
		return null;
	}	
}
----------------------------------------------------------
// test
package com.hsbc.gfix.test;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class Test {

	public static void main(String[] args) throws Throwable{
		Subject rs = new RealSubject();
		InvocationHandler ds = new DynamicSubject(rs);
		Class<?> cls = rs.getClass();
		
		Subject subject = (Subject) Proxy.newProxyInstance(cls.getClassLoader(), cls.getInterfaces(), ds);
		
		System.out.println(subject instanceof Proxy);
		
		System.out.println("subject's class is " + subject.getClass().toString());
		
		System.out.println("subject has below attributes:");
		
		Field[] field = subject.getClass().getDeclaredFields();
		for(Field f: field) {
			System.out.println(f.getName() + ",");
		}
		
		System.out.println("\n subject has below functions:");
		Method[] method = subject.getClass().getDeclaredMethods();
		for (Method m:method) {
			System.out.println(m.getName() + ", ");
		}
		
		System.out.println("\n subject's super class is " + subject.getClass().getSuperclass());
		System.out.println("\n subject implements the below interface");
		
		Class<?>[] interfaces = subject.getClass().getInterfaces();
		for (Class<?> i: interfaces) {
			System.out.print(i.getName() + ",");
		}
		
		System.out.println("\n\n" + "results: ");
		subject.request();
	}
	
}
